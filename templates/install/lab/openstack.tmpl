{{- define "install/lab/openstack" -}}
  {{- $lab := . -}}
if [[ ! -f "stx-openstack.tgz" ]]; then
   echo "####### OPENSTACK APP NOT FOUND"
   exit 0
fi

echo "# upload stx-openstack"
scp -F ssh.config stx-openstack.tgz controller-0:/home/sysadmin || die
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
source /etc/platform/openrc
system application-upload stx-openstack.tgz
EOF
wait_application_status stx-openstack 5 uploaded/completed no-error-expected

echo "# apply stx-openstack"
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
source /etc/platform/openrc
system application-apply stx-openstack
EOF
wait_application_status stx-openstack ${APP_STX_OPENSTACK_TIMEOUT} applied/completed "apply-failed/.*"

echo "# update ceph pool replication"
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
ceph osd pool ls | xargs -i ceph osd pool set {} size 1
EOF

echo "# configure cluster endpoints"
ssh -F ./ssh.config controller-0 \
    bash <<'EOF_OUTER' || die
sudo mkdir -p /etc/openstack
sudo tee /etc/openstack/clouds.yaml << EOF
clouds:
  openstack_helm:
    region_name: RegionOne
    identity_api_version: 3
    endpoint_type: internalURL
    auth:
      username: 'admin'
      password: 'Li69nux*'
      project_name: 'admin'
      project_domain_name: 'default'
      user_domain_name: 'default'
      auth_url: 'http://keystone.openstack.svc.cluster.local/v3'
EOF
export OS_CLOUD=openstack_helm
openstack endpoint list
EOF_OUTER

echo "# provider/networking setup"
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
export OS_CLOUD=openstack_helm

ADMINID=`openstack project list | grep admin | awk '{print $2}'`
PHYSNET0='physnet0'
PHYSNET1='physnet1'

openstack network segment range create ${PHYSNET0}-a --network-type vlan --physical-network ${PHYSNET0}  --minimum 400 --maximum 499 --private --project ${ADMINID}
openstack network segment range create ${PHYSNET0}-b --network-type vlan  --physical-network ${PHYSNET0}  --minimum 10 --maximum 10 --shared
openstack network segment range create ${PHYSNET1}-a --network-type vlan  --physical-network  ${PHYSNET1} --minimum 500 --maximum 599  --private --project ${ADMINID}
EOF

echo "# tenant networking setup"
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
export OS_CLOUD=openstack_helm

ADMINID=`openstack project list | grep admin | awk '{print $2}'`
PHYSNET0='physnet0'
PHYSNET1='physnet1'
PUBLICNET='public-net0'
PRIVATENET='private-net0'
INTERNALNET='internal-net0'
EXTERNALNET='external-net0'
PUBLICSUBNET='public-subnet0'
PRIVATESUBNET='private-subnet0'
INTERNALSUBNET='internal-subnet0'
EXTERNALSUBNET='external-subnet0'
PUBLICROUTER='public-router0'
PRIVATEROUTER='private-router0'

openstack network create --project ${ADMINID} --provider-network-type=vlan --provider-physical-network=${PHYSNET0} --provider-segment=10 --share --external ${EXTERNALNET}
openstack network create --project ${ADMINID} --provider-network-type=vlan --provider-physical-network=${PHYSNET0} --provider-segment=400 ${PUBLICNET}
openstack network create --project ${ADMINID} --provider-network-type=vlan --provider-physical-network=${PHYSNET1} --provider-segment=500 ${PRIVATENET}
openstack network create --project ${ADMINID} ${INTERNALNET}
PUBLICNETID=`openstack network list | grep ${PUBLICNET} | awk '{print $2}'`
PRIVATENETID=`openstack network list | grep ${PRIVATENET} | awk '{print $2}'`
INTERNALNETID=`openstack network list | grep ${INTERNALNET} | awk '{print $2}'`
EXTERNALNETID=`openstack network list | grep ${EXTERNALNET} | awk '{print $2}'`
openstack subnet create --project ${ADMINID} ${PUBLICSUBNET} --network ${PUBLICNET} --subnet-range 192.168.101.0/24
openstack subnet create --project ${ADMINID} ${PRIVATESUBNET} --network ${PRIVATENET} --subnet-range 192.168.201.0/24
openstack subnet create --project ${ADMINID} ${INTERNALSUBNET} --gateway none --network ${INTERNALNET} --subnet-range 10.1.1.0/24
openstack subnet create --project ${ADMINID} ${EXTERNALSUBNET} --gateway 192.168.1.1 --no-dhcp --network ${EXTERNALNET} --subnet-range 192.168.51.0/24 --ip-version 4
openstack router create ${PUBLICROUTER}
openstack router create ${PRIVATEROUTER}
PRIVATEROUTERID=`openstack router list | grep ${PRIVATEROUTER} | awk '{print $2}'`
PUBLICROUTERID=`openstack router list | grep ${PUBLICROUTER} | awk '{print $2}'`
openstack router set ${PUBLICROUTER} --external-gateway ${EXTERNALNETID} --disable-snat
openstack router set ${PRIVATEROUTER} --external-gateway ${EXTERNALNETID} --disable-snat
openstack router add subnet ${PUBLICROUTER} ${PUBLICSUBNET}
openstack router add subnet ${PRIVATEROUTER} ${PRIVATESUBNET}
EOF

echo "####### OPENSTACK IS READY"
{{- end }}