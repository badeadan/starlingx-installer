{{- define "vbox-setup" -}}
  {{- $lab := . -}}
#!/usr/bin/env bash
ISO_PATH=

source ./prepare-bootimage.sh

cleanup() {
    {{- range $lab.Vms }}
      {{- $vm := . }}
      {{- $vmName := printf "%s-%s" $lab.Group $vm.Name }}
    vboxmanage unregistervm "{{ $vmName }}" --delete >/dev/null 2>&1
      {{- range $i, $disk := $vm.Disks }}
    vboxmanage closemedium "{{ $disk.Medium }}" --delete >/dev/null 2>&1
      {{- end }}
    {{- end }}
    {{- range $i, $net := $lab.Networks }}
      {{- if eq $net.Mode "hostonly" }}
    vboxmanage hostonlyif remove "{{ $net.Name }}" >/dev/null 2>&1
      {{- end }}
      {{- if eq $net.Mode "natnetwork" }}
    vboxmanage natnetwork remove --netname "{{ $net.Name }}" >/dev/null 2>&1
      {{- end }}
    {{- end }}
    # rm -rf "{{ $lab.BasePath }}"
    vboxmanage closemedium ${ISO_PATH} >/dev/null 2>&1
}

run() {
    "$@"
    if [[ $? -ne 0 ]]; then
        echo "ERR: '$@' failed. Return code: $?"
        cleanup
        exit 1
    fi
}

setup_vbox() {
    # setup networks
    #
    {{- range $i, $net := $lab.Networks }}
      {{- if eq $net.Mode "hostonly" }}
    vboxmanage hostonlyif remove "{{ $net.Name }}" >/dev/null 2>&1
    run vboxmanage hostonlyif create "{{ $net.Name }}"
      {{- end }}
      {{- if eq $net.Mode "natnetwork" }}
    for i in $(seq 3); do
        vboxmanage natnetwork list "{{ $net.Name }}" \
                   | grep '0 networks found' && break
        vboxmanage natnetwork remove --netname "{{ $net.Name }}"
        sleep 2
    done
    run vboxmanage natnetwork add \
               --netname "{{ $net.Name }}" \
               --network "{{ $net.Address }}" \
        {{- range $_, $map := $net.LoopbackMap }}
               --loopback-4 "{{ $map }}" \
        {{- end }}
        {{- range $i, $rule := $net.PortForward }}
               --port-forward-4 "{{ printf "pf-%d:%s" $i $rule }}" \
        {{- end }}
               --enable \
               --dhcp off \
               --ipv6 off
      {{- end }}
    {{- end }}
    {{- range .Vms }}
      {{- $vm := . }}
      {{- $vmName := printf "%s-%s" $lab.Group $vm.Name }}
    # setup {{ $vm.Name }}
    #
    vboxmanage unregistervm "{{ $vmName }}" --delete >/dev/null 2>&1
      {{- range $i, $disk := .Disks }}
    if [[ -f "{{ $disk.Medium }}" ]]; then
        vboxmanage closemedium "{{ $disk.Medium }}" --delete
        rm -f "{{ $disk.Medium }}" || true
    fi
    run vboxmanage createmedium disk \
              --filename "{{ $disk.Medium }}" \
              --size "{{ mul $disk.Size 1024 }}" \
              --format vdi
      {{- end }}
    run vboxmanage createvm \
              --register \
              --name "{{ $vmName }}" \
              --ostype Other_64 \
              --basefolder "{{ $lab.BasePath }}" \
              --groups "/{{ $.Group }}"
    run vboxmanage modifyvm "{{ $vmName }}" \
              --cpus "{{ $vm.Cpus }}" \
              --memory "{{ mul $vm.Memory 1024 }}" \
              --vram 12 \
      {{- if $vm.BootOrder }}
        {{- range $i, $source := $vm.BootOrder }}
              --boot{{ add1 $i }} {{ $source }} \
        {{- end }}
      {{- end }}
              --uart1 0x3F8 4 \
              --uartmode1 server $(realpath "{{ $lab.BasePath }}/{{ $vmName }}-serial") \
              --acpi on \
              --ioapic on
      {{- range $i, $ctrl := $vm.StorageControllers }}
    run vboxmanage storagectl "{{ $vmName }}" \
              --name "{{ $ctrl.Name }}" \
              --add "{{ $ctrl.Type }}" \
              --controller "{{ $ctrl.Chipset }}" \
        {{- if ne $ctrl.Type "ide" }}
              --portcount "{{ $ctrl.PortCount }}" \
        {{- end }}
              --hostiocache {{ $ctrl.HostIOCache | ternary "on" "off" }} \
              --bootable {{ $ctrl.Bootable | ternary "on" "off" }}
      {{- end }}
      {{- range $i, $attach := $vm.StorageAttachments }}
    run vboxmanage storageattach "{{ $vmName }}" \
              --storagectl "{{ $attach.Controller}}" \
              --port "{{ $attach.Port }}" \
              --device "{{ $attach.Device }}" \
              --type "{{ $attach.Type }}" \
        {{- if $attach.NonRotational }}
              --nonrotational on \
        {{- end }}
        {{- if $attach.Discard }}
              --discard on \
        {{- end }}
              --medium "{{ $attach.Medium }}"
      {{- end }}
      {{- range $i, $nic := $vm.Nics }}
        {{- $n := add1 $i }}
        {{- $adapterMap := dict "bridged" "--bridgeadapter" "hostonly" "--hostonlyadapter" "intnet" "--intnet" "natnetwork" "--nat-network" }}
    run vboxmanage modifyvm "{{ $vmName }}" \
               --nic{{ $n }} "{{ $nic.Mode }}" \
               {{ index $adapterMap $nic.Mode }}{{ $n }} "{{ $nic.Network }}" \
         {{- if $nic.BootPrio }}
               --nicbootprio{{ $n }} "{{ $nic.BootPrio }}" \
         {{- end }}
         {{- if $nic.Promisc }}
               --nicpromisc{{ $n }} "{{ $nic.Promisc }}" \
         {{- end }}
               --nictype{{ $n }} "{{ $nic.Type }}"
      {{- end }}
    {{- end }}
}

check_natnet_setuid() {
    if [[ ! -u /usr/lib/virtualbox/VBoxNetNAT ]]; then
        echo >&2 <<EOF
WARNING! VBoxNetNAT is not setuid and it may fail to start. In case
WARNING! "ps fax | grep VBoxNetNAT" shows is as <defunct> you can
WARNING! fix it by running:
WARNING!
WARNING!     sudo /usr/lib/virtualbox/ -type f -executable -exec chmod u+s {} \;
WARNING!
EOF
    fi
}

main() {
    set -x
    prepare_bootimage ${ISO_PATH}
    setup_vbox
    check_natnet_setuid
}

ISO_PATH=$1
if [[ -z "${ISO_PATH}" ]]; then
    echo 'ERROR! missing iso path' >&2
    exit 1
fi
main
{{- end }}
