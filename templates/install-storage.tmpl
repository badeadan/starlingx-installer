{{- define "install-storage" -}}
  {{- $lab := . -}}
#!/usr/bin/env bash

INSTALL_TIMEOUT=${INSTALL_TIMEOUT:-20}
REBOOT_TIMEOUT=${REBOOT_TIMEOUT:-10}
PLATFORM_TIMEOUT=${PLATFORM_TIMEOUT:-15}

{{ template "install-utils" }}

setup_ssh() {
    cat <<EOF >ssh.config
Host controller-0
  User sysadmin
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  GlobalKnownHostsFile /dev/null
  Hostname 127.0.1.3
  Port 2222

Host controller-0-*
  User sysadmin
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  GlobalKnownHostsFile /dev/null
  ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=no -o GlobalKnownHostsFile=no sysadmin@$127.0.1.3 -p 2222 nc $(echo %h | sed -s "s/controller-0-//") 22

Host controller-1
  User sysadmin
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  GlobalKnownHostsFile /dev/null
  Hostname 127.0.1.4
  Port 2222

Host controller-1-*
  User sysadmin
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  GlobalKnownHostsFile /dev/null
  ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=no -o GlobalKnownHostsFile=no sysadmin@$127.0.1.4 -p 2222 nc $(echo %h | sed -s "s/controller-1-//") 22
EOF
}

set -x

# prepare ssh config
#
setup_ssh

# boot controller-0
#
vboxmanage startvm {{ printf "%s-controller-0" $lab.Name }} --type headless || die
wait_ssh_up controller-0 ${INSTALL_TIMEOUT}

# run ansible playbook
#
ssh -F ./ssh.config controller-0 \
    ansible-playbook /usr/share/ansible/stx-ansible/playbooks/bootstrap/bootstrap.yml || die

# platform provisioning
#
wait_platform_available controller-0 ${PLATFORM_TIMEOUT}

#  configure OAM, Management and Cluster interfaces
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
source /etc/platform/openrc
OAM_IF=enp0s3
MGMT_IF=enp0s8
system host-if-modify controller-0 lo -c none
IFNET_UUIDS=$(system interface-network-list controller-0 | awk '{if ($6 =="lo") print $4;}')
for UUID in $IFNET_UUIDS; do
    system interface-network-remove ${UUID}
done
set -e
system host-if-modify controller-0 $OAM_IF -c platform
system interface-network-assign controller-0 $OAM_IF oam
system host-if-modify controller-0 $MGMT_IF -c platform
system interface-network-assign controller-0 $MGMT_IF mgmt
system interface-network-assign controller-0 $MGMT_IF cluster-host
EOF

#  prepare the host for running containerized services
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
source /etc/platform/openrc
system host-label-assign controller-0 openstack-control-plane=enabled
EOF

# unlock controller-0
ssh -F ./ssh.config controller-0 \
    bash <<'EOF' || die
source /etc/platform/openrc
system host-unlock controller-0
EOF
wait_ssh_down controller-0 10
wait_ssh_up controller-0 REBOOT_TIMEOUT

wait_host_status controller-0 10 unlocked enabled available

echo "################### DONE"
exit 0
# install remaining hosts
#
vboxmanage startvm ${CONTROLLER_1} --type headless
wait_until_new_host
ssh -F ./ssh.config controller-0 \
    bash <<EOF
source /etc/platform/openrc
system host-update 2 personality=controller
EOF

vboxmanage startvm ${COMPUTE_0} --type headless
wait_until_new_host
ssh -F ./ssh.config controller-0 \
    bash <<EOF
source /etc/platform/openrc
system host-update 3 personality=compute
EOF

vboxmanage startvm ${COMPUTE_1} --type headless
wait_until_new_host
ssh -F ./ssh.config controller-0 \
    bash <<EOF
source /etc/platform/openrc
system host-update 4 personality=compute
EOF

vboxmanage startvm ${STORAGE_0} --type headless
wait_until_new_host
ssh -F ./ssh.config controller-0 \
    bash <<EOF
source /etc/platform/openrc
system host-update 3 personality=storage
EOF

vboxmanage startvm ${STORAGE_1} --type headless
wait_until_new_host
ssh -F ./ssh.config controller-0 \
    bash <<EOF
source /etc/platform/openrc
system host-update 4 personality=storage
EOF

wait_until_all_hosts_online

# prepare compute nodes for containerized services
#
ssh -F ./ssh.config controller-0 \
    bash <<'EOF'
source /etc/platform/openrc
system host-label-assign controller-1 openstack-control-plane=enabled
for NODE in compute-0 compute-1; do
    system host-label-assign $NODE  openstack-compute-node=enabled
    system host-label-assign $NODE  openvswitch=enabled
    system host-label-assign $NODE  sriov=enabled
done
EOF

# provision controller-1
#
ssh -F ./ssh.config controller-0 \
    bash <<'EOF'
source /etc/platform/openrc
system host-if-modify -n oam0 -c platform controller-1 $(system host-if-list -a controller-1 | awk '/enp0s3/{print $2}')
system interface-network-assign controller-1 oam0 oam
system interface-network-assign controller-1 mgmt0 cluster-host
EOF

ssh -F ./ssh.config controller-0 \
    bash <<'EOF'
source /etc/platform/openrc
system host-unlock controller-1
EOF

wait_until_enabled_available controller-1

# provision computes
#

{{- end }}