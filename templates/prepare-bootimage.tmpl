{{- define "prepare-bootimage" }}
  {{- $lab := . -}}
prepare_bootimage() {
    local iso=$1
    if [[ ! -f "${iso}" ]]; then
        echo "ERROR: missing iso ${iso}" >&2
        exit 1
    fi
    TMP_ORIG_ISO_DIR=$(mktemp -d)
    TMP_PATCH_ISO_DIR=$(mktemp -d)
    fuseiso -p "${iso}" ${TMP_ORIG_ISO_DIR}
    rsync -ra ${TMP_ORIG_ISO_DIR}/ ${TMP_PATCH_ISO_DIR}
    fusermount -u ${TMP_ORIG_ISO_DIR}
    OUT_ISO_PATH=$(realpath ./bootimage-auto.iso)
    rmdir ${TMP_ORIG_ISO_DIR}
    chmod -R +w ${TMP_PATCH_ISO_DIR}
    pushd ${TMP_PATCH_ISO_DIR}
    isolinux_boot_override || die
    setup_user_access ks.cfg || die
    setup_user_access smallsystem_ks.cfg || die
    setup_oam_interface ks.cfg || die
    setup_oam_interface smallsystem_ks.cfg || die
    setup_known_hosts ks.cfg || die
    setup_known_hosts smallsystem_ks.cfg || die
    setup_known_hosts controller_ks.cfg || die
    prepare_ansible ks.cfg || die
    prepare_ansible smallsystem_ks.cfg || die
    mkisofs -R -D -A 'oe_iso_boot' -V 'oe_iso_boot' \
            -quiet \
            -b isolinux.bin \
            -c boot.cat \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            -eltorito-alt-boot \
            -e images/efiboot.img \
            -no-emul-boot \
            -o ${OUT_ISO_PATH} \
             ${TMP_PATCH_ISO_DIR}
    popd
    rm -rf ${TMP_PATCH_ISO_DIR}
}

isolinux_boot_override() {
{{- if eq $lab.SystemMode "simplex" }}
    sed -i 's#ui vesamenu.c32#default 2#' isolinux.cfg
{{- else }}
    sed -i 's#ui vesamenu.c32#default 0#' isolinux.cfg
{{- end }}
}

setup_user_access() {
    local ks_file=$1
    sed -i 's#chage -d 0 sysadmin#echo "Li69nux*" | passwd --stdin sysadmin#' \
        ${ks_file}
    sed -i 's#passwd -l root#echo "Li69nux*" | passwd --stdin root#' \
        ${ks_file}
    cat <<OUTER_EOF >>${ks_file}
%post --erroronfail
cat <<EOF >>/etc/sudoers
sysadmin ALL=(ALL) NOPASSWD: ALL
EOF
cat <<EOF >>/etc/ssh/sshd_config
PermitRootLogin yes
AllowAgentForwarding yes
AllowTcpForwarding yes
TCPKeepAlive yes
PermitTunnel yes
EOF
%end
OUTER_EOF
}

setup_oam_interface() {
    local ks_file=$1
    cat <<OUTER_EOF >>${ks_file}
%post --erroronfail
cat <<EOF >/etc/sysconfig/network-scripts/ifcfg-enp0s3
DEVICE=enp0s3
IPADDR={{ default $lab.Oam.FloatAddr $lab.Oam.Controller0 }}
NETMASK={{ $lab.Oam.Network | NetCidrMask }}
GATEWAY={{ $lab.Oam.Gateway }}
ONBOOT=yes
EOF
%end
OUTER_EOF
}

setup_known_hosts() {
    local ks_file=$1
    cat <<OUTER_EOF >>${ks_file}
%post --erroronfail
mkdir -p /root/.ssh
cat <<EOF >/root/.ssh/authorized_keys
$(cat ~/.ssh/id_rsa.pub)
EOF
chmod -R u=rwX /home/sysadmin/.ssh
cp -rfp /root/.ssh /home/sysadmin/
chown -R sysadmin:users /home/sysadmin/.ssh
%end
OUTER_EOF
}

prepare_ansible() {
    local ks_file=$1
    cat <<OUTER_EOF >>${ks_file}
%post --erroronfail
cat <<EOF >/home/sysadmin/localhost.yml
# Mandatory
system_mode: {{ eq $lab.SystemMode "simplex" | ternary "simplex" "duplex" }}

# Optional
external_oam_subnet: {{ $lab.Oam.Network }}
external_oam_gateway_address: {{ $lab.Oam.Gateway }}
external_oam_floating_address: {{ $lab.Oam.FloatAddr }}
{{- if $lab.Oam.Controller0 }}
external_oam_node_0_address: {{ $lab.Oam.Controller0 }}
{{- end }}
{{- if $lab.Oam.Controller1 }}
external_oam_node_1_address: {{ $lab.Oam.Controller1 }}
{{- end }}
management_subnet: 192.168.204.0/24
dns_servers:
  - 8.8.4.4
admin_password: Li69nux*
ansible_become_pass: Li69nux*
EOF
%end
OUTER_EOF
}
{{- end }}